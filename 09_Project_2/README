===============================================================================
Munich University of Applied Sciences
Department of Computer Science and Mathematics

Course:     Operating Systems 2
Assignment: Project 2
Author:     Marcel Binder
===============================================================================

                                   (1)
                            Working features

* all requested
* perform a search via ioctl() (OFS_PID, OFS_UID, OFS_OWNER and OFS_NAME)
* read any number of results via read()
  read can be called multiple times until all results have been read
  a new search can be performed any time
* locking on task_struct
* RCU locking on cred, files_struct, fdtable and file 

Building
--------
* make clean
* make all

Header file for user programs
-----------------------------
openFileSearch.h


                                   (2)
                             Implementation

open
====
* driver cannot be used concurrently -> block with -EBUSY if alread in use
* discard any search performed by a previous caller
* allocate memory for the result array

release
=======
* free memory of result array
* clear device_opened_ flag -> open is permitted again

ioctl
=====
* dispatches to ofs_search_open_files_by_xxx() method depending on command
* casts void pointer
* searched filename is copied to kernel memory
* results are copied to passed address in user memory
* any previous search is discarded by clearing the search_performed_ flag

OFS_PID
-------
* search all open files of a *single* task
* requests task_struct for given PID
  if not possible -> PID invalid -> return -EINVAL
* actual search is performed by calling ofs_search() with a 'all-match' filter
  (see description below)

ofs_search()
* traverses the open files of a single task
* converting each into an ofs_result
* writes into next free position in result array
* applies filter method which is passed by the called to all results
* if result passes filter -> increment result counter
  -> do not overwrite the result with the next one
* if result is filtered out -> it will be overwritten by next result
* returns if either all open files have been processed or maximum number of
  results has been reached

OFS_UID, OFS_OWNER and OFS_NAME
-------------------------------
* search in all open files of *all* tasks
* criteria (by PID, UID, owner) are implemented as filter methods which are
  passed to ofs_search_all() (see description below)

ofs_search_all()
* First idea:
  Use init task as entry point for traversing the process tree (task_struct
  has list of children which can be used for depth-search)
* BUT: depth-search would be implemented recursively -> recursion should be
  avoided in the kernel as its stack is limited!
* solution: macro for_each_process() uses the tasks field of task_struct
  (= list of all tasks in the system) to iterate over all tasks starting at
  init_task
* init_task is exported by the kernel
  not actually the init task with PID 1 because it has PID 0 assigned
  + init_task is skipped when using for_each_process
  -> init_task represents swapper process which is not important for the open
  file search
* ofs_search_all() calls ofs_search() for each task
* stops if either all tasks have been processed or the maximum number of
  results has been reached

NOTICES ON FILENAMES:
* ofs_result.name contains the full path of the opened file
  OFS_NAME also expects the full path
  the short name (= filename) is only used if the path is too long
  e.g. for system.journal, user-<UID>.journal and user@<UID>.service
* d_path is used to reconstruct paths
  -> special files like sockets and pipes are named
     socket:[295] and pipe:[1432]
     this notation can also be used for OFS_NAME searches


read
====
* can only be called after a search has been performed via ioctl()
  returns -ESRCH otherwise
* can be called multiple times until no more results are available
  BUT at least once if ioctl() was successful (even if no results were found)
* if no more results are available read() returns 0 and clears the
  search_performed_ flag -> further calls will return -ESRCH (see example
  below)
* ofs_search() stops when reaching the result array's capacity
  -> read() can rely on read_count_

Example:
search: 10 elements found
call read() multiple times with a buffer of size 3

| read() call | filled in buffer              | return |
|-------------|-------------------------------|--------|
| 1           | results #1-3                  | 3      |
| 2           | results #4-6                  | 3      |
| 3           | results #7-9                  | 3      |
| 4           | result #10                    | 1      |
| 5           | -                             | 0      |
|             | no more results are available | 0      |
|             | clear search_performed_ flag  |        |
| 6           | -                             | -ESRCH |
|             | no search has been performed  |        |
|             | yet                           |        |


                                   (3)
                               Known bugs
* none

Tested with following kernels (uname -r -v)
* 4.11.3-1-ARCH #1 SMP PREEMPT
* 4.10.4.1-ARCH #1 SMP PREEMPT

